"use strict";var assignmentText,actualAssignment,assignmentID,__assign=function(){return(__assign=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)},toDoAssignmentsContainer=document.querySelector(".to-do-assignments"),editAssignmentContainer=document.querySelector(".to-do-edit-assignment"),heroBG=document.querySelector(".to-do-edit-assignment-hero-bg"),toDoInput=document.querySelector(".to-do-header__input"),editInput=document.querySelector(".to-do-edit-assignment__input"),toDoAddBtn=document.querySelector(".to-do-header__add-button"),acceptEditBtn=document.querySelector(".to-do-edit-assignment__button--accept"),cancelEditBtn=document.querySelector(".to-do-edit-assignment__button--cancel"),toDoAssignmentID=1,addToDo=function(){!1!==validateToDo()&&(createToDoBody(),clearToDoInput())},validateToDo=function(){var t=document.querySelector(".to-do-header__error");return""===toDoInput.value?(t.classList.add("to-do-header__error--active"),t.classList.add("to-do-header__error--active-visibility"),!1):(t.classList.remove("to-do-header__error--active"),setTimeout(function(){t.classList.remove("to-do-header__error--active-visibility")},300),!0)},createToDoBody=function(){var t=document.querySelector(".to-do-assignment-template").content.cloneNode(!0),e=t.querySelector(".to-do-assignment__text"),n=t.querySelector(".to-do-assignment");t.querySelector(".to-do-assignment-buttons__button--remove");n.addEventListener("click",functionalBtns),n.dataset.id=toDoAssignmentID.toString(),e.textContent=toDoInput.value,toDoAssignmentsContainer.append(t),localStorage.setItem("".concat(toDoAssignmentID),n.outerHTML),toDoAssignmentID++},clearToDoInput=function(){toDoInput.value=""},functionalBtns=function(t){var e=(actualAssignment=t.currentTarget).querySelector(".to-do-assignment-buttons__button--done"),n=actualAssignment.querySelector(".fa-check"),o=actualAssignment.querySelector(".to-do-assignment-buttons__button--edit"),s=actualAssignment.querySelector(".fa-xmark"),a=actualAssignment.querySelector(".to-do-assignment-buttons__button--remove");switch(assignmentText=actualAssignment.querySelector(".to-do-assignment__text"),assignmentID=actualAssignment.dataset.id,t.target){case e:case n:completeToDo();break;case o:editToDo();break;case a:case s:deleteToDo();break;default:return}},completeToDo=function(){assignmentText.classList.toggle("to-do-assignment__text--done"),localStorage.setItem(assignmentID,actualAssignment.outerHTML)},editToDo=function(){editInput.value=assignmentText.textContent,showEditPanel()},deleteToDo=function(){actualAssignment.remove(),localStorage.removeItem(assignmentID)},acceptEdit=function(){assignmentText.textContent=editInput.value,localStorage.setItem(assignmentID,actualAssignment.outerHTML),hideEditPanel()},cancelEdit=function(){hideEditPanel()},showEditPanel=function(){document.querySelector(".to-do");editAssignmentContainer.classList.add("to-do-edit-assignment--active"),heroBG.classList.add("to-do-edit-assignment-hero-bg--active")},hideEditPanel=function(){editAssignmentContainer.classList.remove("to-do-edit-assignment--active"),heroBG.classList.remove("to-do-edit-assignment-hero-bg--active")},loadStoragedToDos=function(){var t,e=__assign({},localStorage);for(t in e)toDoAssignmentsContainer.innerHTML+=e[t],toDoAssignmentID=Number(t)+1;document.querySelectorAll(".to-do-assignment").forEach(function(t){return t.addEventListener("click",functionalBtns)})};toDoAddBtn.addEventListener("click",addToDo),acceptEditBtn.addEventListener("click",acceptEdit),cancelEditBtn.addEventListener("click",cancelEdit),window.addEventListener("DOMContentLoaded",loadStoragedToDos);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNyYy90cy9hcHAudHMiXSwibmFtZXMiOlsiYXNzaWdubWVudFRleHQiLCJhY3R1YWxBc3NpZ25tZW50IiwiYXNzaWdubWVudElEIiwiX19hc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJ0IiwicyIsImkiLCJuIiwiYXJndW1lbnRzIiwicCIsImxlbmd0aCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsInRvRG9Bc3NpZ25tZW50c0NvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImVkaXRBc3NpZ25tZW50Q29udGFpbmVyIiwiaGVyb0JHIiwidG9Eb0lucHV0IiwiZWRpdElucHV0IiwidG9Eb0FkZEJ0biIsImFjY2VwdEVkaXRCdG4iLCJjYW5jZWxFZGl0QnRuIiwidG9Eb0Fzc2lnbm1lbnRJRCIsImFkZFRvRG8iLCJ2YWxpZGF0ZVRvRG8iLCJjcmVhdGVUb0RvQm9keSIsImNsZWFyVG9Eb0lucHV0IiwidG9Eb0Vycm9yIiwidmFsdWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwidG9Eb0Fzc2lnbm1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwidG9Eb0Fzc2lnbm1lbnRUZXh0IiwidG9Eb0Fzc2lnbm1lbnRDb250YWluZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZnVuY3Rpb25hbEJ0bnMiLCJkYXRhc2V0IiwiaWQiLCJ0b1N0cmluZyIsInRleHRDb250ZW50IiwiYXBwZW5kIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImNvbmNhdCIsIm91dGVySFRNTCIsImUiLCJhc3NpZ25tZW50RG9uZUJ1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJhc3NpZ25tZW50RG9uZUJ1dHRvbkljb24iLCJhc3NpZ25tZW50RWRpdEJ1dHRvbiIsImFzc2lnbm1lbnREZWxldGVCdXR0b25JY29uIiwiYXNzaWdubWVudERlbGV0ZUJ1dHRvbiIsInRhcmdldCIsImNvbXBsZXRlVG9EbyIsImVkaXRUb0RvIiwiZGVsZXRlVG9EbyIsInRvZ2dsZSIsInNob3dFZGl0UGFuZWwiLCJyZW1vdmVJdGVtIiwiYWNjZXB0RWRpdCIsImhpZGVFZGl0UGFuZWwiLCJjYW5jZWxFZGl0IiwibG9hZFN0b3JhZ2VkVG9Eb3MiLCJ0b0RvIiwic3RvcmFnZWRUb0RvcyIsImlubmVySFRNTCIsIk51bWJlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwid2luZG93Il0sIm1hcHBpbmdzIjoiYUFBQSxJQ1VDQSxlQUNBQyxpQkFDQUMsYURaR0MsU0FBc0MsV0FRckMsT0FQREEsU0FBV0MsT0FBT0MsUUFBVSxTQUFTQyxHQURyQ0gsSUFBUSxJQUFJSSxFQUFBQyxFQUFBLEVBQVFDLEVBQUFDLFVBQUtQLE9BQWFLLEVBQUFDLEVBQUFELENBQUEsR0FFN0IsSUFBUSxJQUFJRyxLQURiSixFQUFHSCxVQUFhSSxHQUNHRSxPQUFVRSxVQUFhQyxlQUFPQyxLQUFBUCxFQUFBSSxDQUFBLElBQzdDRCxFQUFBQSxHQUFZSCxFQUFBSSxJQUdwQixPQUFBTCxDQUNBLEdBQ0hTLE1BQUFDLEtBQUFOLFNBQUEsQ0FFTCxFQ1ZNTyx5QkFBMkJDLFNBQVNDLGNBQWMsb0JBQW9CLEVBQ3RFQyx3QkFBMEJGLFNBQVNDLGNBQWMsd0JBQXdCLEVBQ3pFRSxPQUFTSCxTQUFTQyxjQUFjLGdDQUFnQyxFQUVoRUcsVUFBWUosU0FBU0MsY0FBYyxzQkFBc0IsRUFDekRJLFVBQVlMLFNBQVNDLGNBQWMsK0JBQStCLEVBQ2xFSyxXQUFhTixTQUFTQyxjQUFjLDJCQUEyQixFQUMvRE0sY0FBZ0JQLFNBQVNDLGNBQWMsd0NBQXdDLEVBQy9FTyxjQUFnQlIsU0FBU0MsY0FBYyx3Q0FBd0MsRUFDakZRLGlCQUEyQixFQUt6QkMsUUFBVSxXQUNRLENBQUEsSUFBbkJDLGFBQVksSUFDaEJDLGVBQWMsRUFDZEMsZUFBYyxFQUNmLEVBRU1GLGFBQWUsV0FDcEIsSUFBTUcsRUFBWWQsU0FBU0MsY0FBYyxzQkFBc0IsRUFFL0QsTUFBd0IsS0FB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QVdtQixpQkFBaUIsUUFBU2YsT0FBTyxFQUM1Q0gsY0FBY2tCLGlCQUFpQixRQUFTeUIsVUFBVSxFQUNsRDFDLGNBQWNpQixpQkFBaUIsUUFBUzJCLFVBQVUsRUFDbERRLE9BQU9uQyxpQkFBaUIsbUJBQW9CNEIsaUJBQWlCIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIHRvRG9Bc3NpZ25tZW50c0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1hc3NpZ25tZW50cycpO1xudmFyIGVkaXRBc3NpZ25tZW50Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWVkaXQtYXNzaWdubWVudCcpO1xudmFyIGhlcm9CRyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1lZGl0LWFzc2lnbm1lbnQtaGVyby1iZycpO1xudmFyIHRvRG9JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1oZWFkZXJfX2lucHV0Jyk7XG52YXIgZWRpdElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWVkaXQtYXNzaWdubWVudF9faW5wdXQnKTtcbnZhciB0b0RvQWRkQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWhlYWRlcl9fYWRkLWJ1dHRvbicpO1xudmFyIGFjY2VwdEVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tZWRpdC1hc3NpZ25tZW50X19idXR0b24tLWFjY2VwdCcpO1xudmFyIGNhbmNlbEVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tZWRpdC1hc3NpZ25tZW50X19idXR0b24tLWNhbmNlbCcpO1xudmFyIHRvRG9Bc3NpZ25tZW50SUQgPSAxLCBhc3NpZ25tZW50VGV4dCwgYWN0dWFsQXNzaWdubWVudCwgYXNzaWdubWVudElEO1xudmFyIGFkZFRvRG8gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZhbGlkYXRlVG9EbygpID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNyZWF0ZVRvRG9Cb2R5KCk7XG4gICAgY2xlYXJUb0RvSW5wdXQoKTtcbn07XG52YXIgdmFsaWRhdGVUb0RvID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b0RvRXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8taGVhZGVyX19lcnJvcicpO1xuICAgIGlmICh0b0RvSW5wdXQudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHRvRG9FcnJvci5jbGFzc0xpc3QuYWRkKCd0by1kby1oZWFkZXJfX2Vycm9yLS1hY3RpdmUnKTtcbiAgICAgICAgdG9Eb0Vycm9yLmNsYXNzTGlzdC5hZGQoJ3RvLWRvLWhlYWRlcl9fZXJyb3ItLWFjdGl2ZS12aXNpYmlsaXR5Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRvRG9FcnJvci5jbGFzc0xpc3QucmVtb3ZlKCd0by1kby1oZWFkZXJfX2Vycm9yLS1hY3RpdmUnKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0b0RvRXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8taGVhZGVyX19lcnJvci0tYWN0aXZlLXZpc2liaWxpdHknKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbnZhciBjcmVhdGVUb0RvQm9keSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tYXNzaWdubWVudC10ZW1wbGF0ZScpO1xuICAgIHZhciB0b0RvQXNzaWdubWVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgIHZhciB0b0RvQXNzaWdubWVudFRleHQgPSB0b0RvQXNzaWdubWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tYXNzaWdubWVudF9fdGV4dCcpO1xuICAgIHZhciB0b0RvQXNzaWdubWVudENvbnRhaW5lciA9IHRvRG9Bc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1hc3NpZ25tZW50Jyk7XG4gICAgdmFyIHRvRG9Bc3NpZ25tZW50RGVsZXRlQnRuID0gdG9Eb0Fzc2lnbm1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnQtYnV0dG9uc19fYnV0dG9uLS1yZW1vdmUnKTtcbiAgICB0b0RvQXNzaWdubWVudENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uYWxCdG5zKTtcbiAgICB0b0RvQXNzaWdubWVudENvbnRhaW5lci5kYXRhc2V0LmlkID0gdG9Eb0Fzc2lnbm1lbnRJRC50b1N0cmluZygpO1xuICAgIHRvRG9Bc3NpZ25tZW50VGV4dC50ZXh0Q29udGVudCA9IHRvRG9JbnB1dC52YWx1ZTtcbiAgICB0b0RvQXNzaWdubWVudHNDb250YWluZXIuYXBwZW5kKHRvRG9Bc3NpZ25tZW50KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIlwiLmNvbmNhdCh0b0RvQXNzaWdubWVudElEKSwgdG9Eb0Fzc2lnbm1lbnRDb250YWluZXIub3V0ZXJIVE1MKTtcbiAgICB0b0RvQXNzaWdubWVudElEKys7XG59O1xudmFyIGNsZWFyVG9Eb0lucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRvRG9JbnB1dC52YWx1ZSA9ICcnO1xufTtcbnZhciBmdW5jdGlvbmFsQnRucyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgYWN0dWFsQXNzaWdubWVudCA9IGUuY3VycmVudFRhcmdldDtcbiAgICB2YXIgYXNzaWdubWVudERvbmVCdXR0b24gPSBhY3R1YWxBc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1hc3NpZ25tZW50LWJ1dHRvbnNfX2J1dHRvbi0tZG9uZScpO1xuICAgIHZhciBhc3NpZ25tZW50RG9uZUJ1dHRvbkljb24gPSBhY3R1YWxBc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYS1jaGVjaycpO1xuICAgIHZhciBhc3NpZ25tZW50RWRpdEJ1dHRvbiA9IGFjdHVhbEFzc2lnbm1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnQtYnV0dG9uc19fYnV0dG9uLS1lZGl0Jyk7XG4gICAgdmFyIGFzc2lnbm1lbnREZWxldGVCdXR0b25JY29uID0gYWN0dWFsQXNzaWdubWVudC5xdWVyeVNlbGVjdG9yKCcuZmEteG1hcmsnKTtcbiAgICB2YXIgYXNzaWdubWVudERlbGV0ZUJ1dHRvbiA9IGFjdHVhbEFzc2lnbm1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnQtYnV0dG9uc19fYnV0dG9uLS1yZW1vdmUnKTtcbiAgICBhc3NpZ25tZW50VGV4dCA9IGFjdHVhbEFzc2lnbm1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnRfX3RleHQnKTtcbiAgICBhc3NpZ25tZW50SUQgPSBhY3R1YWxBc3NpZ25tZW50LmRhdGFzZXQuaWQ7XG4gICAgc3dpdGNoIChlLnRhcmdldCkge1xuICAgICAgICBjYXNlIGFzc2lnbm1lbnREb25lQnV0dG9uOlxuICAgICAgICBjYXNlIGFzc2lnbm1lbnREb25lQnV0dG9uSWNvbjpcbiAgICAgICAgICAgIGNvbXBsZXRlVG9EbygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYXNzaWdubWVudEVkaXRCdXR0b246XG4gICAgICAgICAgICBlZGl0VG9EbygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYXNzaWdubWVudERlbGV0ZUJ1dHRvbjpcbiAgICAgICAgY2FzZSBhc3NpZ25tZW50RGVsZXRlQnV0dG9uSWNvbjpcbiAgICAgICAgICAgIGRlbGV0ZVRvRG8oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbn07XG52YXIgY29tcGxldGVUb0RvID0gZnVuY3Rpb24gKCkge1xuICAgIGFzc2lnbm1lbnRUZXh0LmNsYXNzTGlzdC50b2dnbGUoJ3RvLWRvLWFzc2lnbm1lbnRfX3RleHQtLWRvbmUnKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShhc3NpZ25tZW50SUQsIGFjdHVhbEFzc2lnbm1lbnQub3V0ZXJIVE1MKTtcbn07XG52YXIgZWRpdFRvRG8gPSBmdW5jdGlvbiAoKSB7XG4gICAgZWRpdElucHV0LnZhbHVlID0gYXNzaWdubWVudFRleHQudGV4dENvbnRlbnQ7XG4gICAgc2hvd0VkaXRQYW5lbCgpO1xufTtcbnZhciBkZWxldGVUb0RvID0gZnVuY3Rpb24gKCkge1xuICAgIGFjdHVhbEFzc2lnbm1lbnQucmVtb3ZlKCk7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYXNzaWdubWVudElEKTtcbn07XG52YXIgYWNjZXB0RWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBhc3NpZ25tZW50VGV4dC50ZXh0Q29udGVudCA9IGVkaXRJbnB1dC52YWx1ZTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShhc3NpZ25tZW50SUQsIGFjdHVhbEFzc2lnbm1lbnQub3V0ZXJIVE1MKTtcbiAgICBoaWRlRWRpdFBhbmVsKCk7XG59O1xudmFyIGNhbmNlbEVkaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlkZUVkaXRQYW5lbCgpO1xufTtcbnZhciBzaG93RWRpdFBhbmVsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b0RvTWFpbkFwcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kbycpO1xuICAgIC8vIHRvRG9NYWluQXBwPy5jbGFzc0xpc3QuYWRkKCd0by1kby0taW5hY3RpdmUnKTtcbiAgICBlZGl0QXNzaWdubWVudENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0by1kby1lZGl0LWFzc2lnbm1lbnQtLWFjdGl2ZScpO1xuICAgIGhlcm9CRy5jbGFzc0xpc3QuYWRkKCd0by1kby1lZGl0LWFzc2lnbm1lbnQtaGVyby1iZy0tYWN0aXZlJyk7XG59O1xudmFyIGhpZGVFZGl0UGFuZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWRpdEFzc2lnbm1lbnRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8tZWRpdC1hc3NpZ25tZW50LS1hY3RpdmUnKTtcbiAgICBoZXJvQkcuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8tZWRpdC1hc3NpZ25tZW50LWhlcm8tYmctLWFjdGl2ZScpO1xufTtcbnZhciBsb2FkU3RvcmFnZWRUb0RvcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RvcmFnZWRUb0RvcyA9IF9fYXNzaWduKHt9LCBsb2NhbFN0b3JhZ2UpO1xuICAgIGZvciAodmFyIHRvRG8gaW4gc3RvcmFnZWRUb0Rvcykge1xuICAgICAgICB0b0RvQXNzaWdubWVudHNDb250YWluZXIuaW5uZXJIVE1MICs9IHN0b3JhZ2VkVG9Eb3NbdG9Eb107XG4gICAgICAgIHRvRG9Bc3NpZ25tZW50SUQgPSBOdW1iZXIodG9EbykgKyAxO1xuICAgIH1cbiAgICB2YXIgdG9Eb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG8tZG8tYXNzaWdubWVudCcpO1xuICAgIHRvRG9zLmZvckVhY2goZnVuY3Rpb24gKHRvRG8pIHsgcmV0dXJuIHRvRG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbmFsQnRucyk7IH0pO1xufTtcbnRvRG9BZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZGRUb0RvKTtcbmFjY2VwdEVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhY2NlcHRFZGl0KTtcbmNhbmNlbEVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYW5jZWxFZGl0KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZFN0b3JhZ2VkVG9Eb3MpO1xuIiwiY29uc3QgdG9Eb0Fzc2lnbm1lbnRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnRzJykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbmNvbnN0IGVkaXRBc3NpZ25tZW50Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWVkaXQtYXNzaWdubWVudCcpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG5jb25zdCBoZXJvQkcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tZWRpdC1hc3NpZ25tZW50LWhlcm8tYmcnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHJcbmNvbnN0IHRvRG9JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1oZWFkZXJfX2lucHV0JykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuY29uc3QgZWRpdElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWVkaXQtYXNzaWdubWVudF9faW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5jb25zdCB0b0RvQWRkQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWhlYWRlcl9fYWRkLWJ1dHRvbicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5jb25zdCBhY2NlcHRFZGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWVkaXQtYXNzaWdubWVudF9fYnV0dG9uLS1hY2NlcHQnKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuY29uc3QgY2FuY2VsRWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1lZGl0LWFzc2lnbm1lbnRfX2J1dHRvbi0tY2FuY2VsJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmxldCB0b0RvQXNzaWdubWVudElEOiBudW1iZXIgPSAxLFxyXG5cdGFzc2lnbm1lbnRUZXh0OiBIVE1MUGFyYWdyYXBoRWxlbWVudCxcclxuXHRhY3R1YWxBc3NpZ25tZW50OiBIVE1MRGl2RWxlbWVudCxcclxuXHRhc3NpZ25tZW50SUQ6IHN0cmluZztcclxuXHJcbmNvbnN0IGFkZFRvRG8gPSAoKTogdm9pZCA9PiB7XHJcblx0aWYgKHZhbGlkYXRlVG9EbygpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdGNyZWF0ZVRvRG9Cb2R5KCk7XHJcblx0Y2xlYXJUb0RvSW5wdXQoKTtcclxufTtcclxuXHJcbmNvbnN0IHZhbGlkYXRlVG9EbyA9ICgpOiBib29sZWFuID0+IHtcclxuXHRjb25zdCB0b0RvRXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8taGVhZGVyX19lcnJvcicpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG5cclxuXHRpZiAodG9Eb0lucHV0LnZhbHVlID09PSAnJykge1xyXG5cdFx0dG9Eb0Vycm9yLmNsYXNzTGlzdC5hZGQoJ3RvLWRvLWhlYWRlcl9fZXJyb3ItLWFjdGl2ZScpO1xyXG5cdFx0dG9Eb0Vycm9yLmNsYXNzTGlzdC5hZGQoJ3RvLWRvLWhlYWRlcl9fZXJyb3ItLWFjdGl2ZS12aXNpYmlsaXR5Jyk7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSBlbHNlIHtcclxuXHRcdHRvRG9FcnJvci5jbGFzc0xpc3QucmVtb3ZlKCd0by1kby1oZWFkZXJfX2Vycm9yLS1hY3RpdmUnKTtcclxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHR0b0RvRXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8taGVhZGVyX19lcnJvci0tYWN0aXZlLXZpc2liaWxpdHknKTtcclxuXHRcdH0sIDMwMCk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVUb0RvQm9keSA9ICgpOiB2b2lkID0+IHtcclxuXHRjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1hc3NpZ25tZW50LXRlbXBsYXRlJykgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcclxuXHJcblx0Y29uc3QgdG9Eb0Fzc2lnbm1lbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudDtcclxuXHRjb25zdCB0b0RvQXNzaWdubWVudFRleHQgPSB0b0RvQXNzaWdubWVudC5xdWVyeVNlbGVjdG9yKCcudG8tZG8tYXNzaWdubWVudF9fdGV4dCcpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG5cdGNvbnN0IHRvRG9Bc3NpZ25tZW50Q29udGFpbmVyID0gdG9Eb0Fzc2lnbm1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvLWFzc2lnbm1lbnQnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHRjb25zdCB0b0RvQXNzaWdubWVudERlbGV0ZUJ0biA9IHRvRG9Bc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoXHJcblx0XHQnLnRvLWRvLWFzc2lnbm1lbnQtYnV0dG9uc19fYnV0dG9uLS1yZW1vdmUnLFxyXG5cdCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG5cdHRvRG9Bc3NpZ25tZW50Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb25hbEJ0bnMpO1xyXG5cdHRvRG9Bc3NpZ25tZW50Q29udGFpbmVyLmRhdGFzZXQuaWQgPSB0b0RvQXNzaWdubWVudElELnRvU3RyaW5nKCk7XHJcblxyXG5cdHRvRG9Bc3NpZ25tZW50VGV4dC50ZXh0Q29udGVudCA9IHRvRG9JbnB1dC52YWx1ZTtcclxuXHJcblx0dG9Eb0Fzc2lnbm1lbnRzQ29udGFpbmVyLmFwcGVuZCh0b0RvQXNzaWdubWVudCk7XHJcblxyXG5cdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3RvRG9Bc3NpZ25tZW50SUR9YCwgdG9Eb0Fzc2lnbm1lbnRDb250YWluZXIub3V0ZXJIVE1MKTtcclxuXHR0b0RvQXNzaWdubWVudElEKys7XHJcbn07XHJcblxyXG5jb25zdCBjbGVhclRvRG9JbnB1dCA9ICgpOiB2b2lkID0+IHtcclxuXHR0b0RvSW5wdXQudmFsdWUgPSAnJztcclxufTtcclxuXHJcbmNvbnN0IGZ1bmN0aW9uYWxCdG5zID0gKGU6IEV2ZW50KSA9PiB7XHJcblx0YWN0dWFsQXNzaWdubWVudCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHRjb25zdCBhc3NpZ25tZW50RG9uZUJ1dHRvbiA9IGFjdHVhbEFzc2lnbm1lbnQucXVlcnlTZWxlY3RvcihcclxuXHRcdCcudG8tZG8tYXNzaWdubWVudC1idXR0b25zX19idXR0b24tLWRvbmUnLFxyXG5cdCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblx0Y29uc3QgYXNzaWdubWVudERvbmVCdXR0b25JY29uID0gYWN0dWFsQXNzaWdubWVudC5xdWVyeVNlbGVjdG9yKCcuZmEtY2hlY2snKSBhcyBIVE1MRWxlbWVudDtcclxuXHRjb25zdCBhc3NpZ25tZW50RWRpdEJ1dHRvbiA9IGFjdHVhbEFzc2lnbm1lbnQucXVlcnlTZWxlY3RvcihcclxuXHRcdCcudG8tZG8tYXNzaWdubWVudC1idXR0b25zX19idXR0b24tLWVkaXQnLFxyXG5cdCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblx0Y29uc3QgYXNzaWdubWVudERlbGV0ZUJ1dHRvbkljb24gPSBhY3R1YWxBc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYS14bWFyaycpIGFzIEhUTUxFbGVtZW50O1xyXG5cdGNvbnN0IGFzc2lnbm1lbnREZWxldGVCdXR0b24gPSBhY3R1YWxBc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoXHJcblx0XHQnLnRvLWRvLWFzc2lnbm1lbnQtYnV0dG9uc19fYnV0dG9uLS1yZW1vdmUnLFxyXG5cdCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblx0YXNzaWdubWVudFRleHQgPSBhY3R1YWxBc3NpZ25tZW50LnF1ZXJ5U2VsZWN0b3IoJy50by1kby1hc3NpZ25tZW50X190ZXh0JykgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcblx0YXNzaWdubWVudElEID0gYWN0dWFsQXNzaWdubWVudC5kYXRhc2V0LmlkIGFzIHN0cmluZztcclxuXHJcblx0c3dpdGNoIChlLnRhcmdldCkge1xyXG5cdFx0Y2FzZSBhc3NpZ25tZW50RG9uZUJ1dHRvbjpcclxuXHRcdGNhc2UgYXNzaWdubWVudERvbmVCdXR0b25JY29uOlxyXG5cdFx0XHRjb21wbGV0ZVRvRG8oKTtcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0Y2FzZSBhc3NpZ25tZW50RWRpdEJ1dHRvbjpcclxuXHRcdFx0ZWRpdFRvRG8oKTtcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0Y2FzZSBhc3NpZ25tZW50RGVsZXRlQnV0dG9uOlxyXG5cdFx0Y2FzZSBhc3NpZ25tZW50RGVsZXRlQnV0dG9uSWNvbjpcclxuXHRcdFx0ZGVsZXRlVG9EbygpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm47XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3QgY29tcGxldGVUb0RvID0gKCk6IHZvaWQgPT4ge1xyXG5cdGFzc2lnbm1lbnRUZXh0LmNsYXNzTGlzdC50b2dnbGUoJ3RvLWRvLWFzc2lnbm1lbnRfX3RleHQtLWRvbmUnKTtcclxuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShhc3NpZ25tZW50SUQsIGFjdHVhbEFzc2lnbm1lbnQub3V0ZXJIVE1MKTtcclxufTtcclxuXHJcbmNvbnN0IGVkaXRUb0RvID0gKCk6IHZvaWQgPT4ge1xyXG5cdGVkaXRJbnB1dC52YWx1ZSA9IGFzc2lnbm1lbnRUZXh0LnRleHRDb250ZW50ITtcclxuXHRzaG93RWRpdFBhbmVsKCk7XHJcbn07XHJcblxyXG5jb25zdCBkZWxldGVUb0RvID0gKCk6IHZvaWQgPT4ge1xyXG5cdGFjdHVhbEFzc2lnbm1lbnQucmVtb3ZlKCk7XHJcblx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYXNzaWdubWVudElEKTtcclxufTtcclxuXHJcbmNvbnN0IGFjY2VwdEVkaXQgPSAoKTogdm9pZCA9PiB7XHJcblx0YXNzaWdubWVudFRleHQudGV4dENvbnRlbnQgPSBlZGl0SW5wdXQudmFsdWU7XHJcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oYXNzaWdubWVudElELCBhY3R1YWxBc3NpZ25tZW50Lm91dGVySFRNTCk7XHJcblx0aGlkZUVkaXRQYW5lbCgpO1xyXG59O1xyXG5cclxuY29uc3QgY2FuY2VsRWRpdCA9ICgpOiB2b2lkID0+IHtcclxuXHRoaWRlRWRpdFBhbmVsKCk7XHJcbn07XHJcblxyXG5jb25zdCBzaG93RWRpdFBhbmVsID0gKCk6IHZvaWQgPT4ge1xyXG5cdGNvbnN0IHRvRG9NYWluQXBwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvLWRvJyk7XHJcblx0Ly8gdG9Eb01haW5BcHA/LmNsYXNzTGlzdC5hZGQoJ3RvLWRvLS1pbmFjdGl2ZScpO1xyXG5cdGVkaXRBc3NpZ25tZW50Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RvLWRvLWVkaXQtYXNzaWdubWVudC0tYWN0aXZlJyk7XHJcblx0aGVyb0JHLmNsYXNzTGlzdC5hZGQoJ3RvLWRvLWVkaXQtYXNzaWdubWVudC1oZXJvLWJnLS1hY3RpdmUnKTtcclxufTtcclxuXHJcbmNvbnN0IGhpZGVFZGl0UGFuZWwgPSAoKTogdm9pZCA9PiB7XHJcblx0ZWRpdEFzc2lnbm1lbnRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8tZWRpdC1hc3NpZ25tZW50LS1hY3RpdmUnKTtcclxuXHRoZXJvQkcuY2xhc3NMaXN0LnJlbW92ZSgndG8tZG8tZWRpdC1hc3NpZ25tZW50LWhlcm8tYmctLWFjdGl2ZScpO1xyXG59O1xyXG5jb25zdCBsb2FkU3RvcmFnZWRUb0RvcyA9ICgpID0+IHtcclxuXHRjb25zdCBzdG9yYWdlZFRvRG9zID0geyAuLi5sb2NhbFN0b3JhZ2UgfTtcclxuXHJcblx0Zm9yIChjb25zdCB0b0RvIGluIHN0b3JhZ2VkVG9Eb3MpIHtcclxuXHRcdHRvRG9Bc3NpZ25tZW50c0NvbnRhaW5lci5pbm5lckhUTUwgKz0gc3RvcmFnZWRUb0Rvc1t0b0RvXTtcclxuXHJcblx0XHR0b0RvQXNzaWdubWVudElEID0gTnVtYmVyKHRvRG8pICsgMTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IHRvRG9zOiBOb2RlTGlzdE9mPEhUTUxEaXZFbGVtZW50PiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50by1kby1hc3NpZ25tZW50Jyk7XHJcblx0dG9Eb3MuZm9yRWFjaCh0b0RvID0+IHRvRG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbmFsQnRucykpO1xyXG59O1xyXG5cclxudG9Eb0FkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFkZFRvRG8pO1xyXG5hY2NlcHRFZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWNjZXB0RWRpdCk7XHJcbmNhbmNlbEVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYW5jZWxFZGl0KTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkU3RvcmFnZWRUb0Rvcyk7XHJcbiJdfQ==
