"use strict";var __assign=function(){return(__assign=Object.assign||function(o){for(var t,e=1,n=arguments.length;e<n;e++)for(var r in t=arguments[e])Object.prototype.hasOwnProperty.call(t,r)&&(o[r]=t[r]);return o}).apply(this,arguments)},toDoAddBtn=document.querySelector(".to-do-header__add-button"),toDoInput=document.querySelector(".to-do-header__input"),toDoAssignmentsContainer=document.querySelector(".to-do-assignments"),toDoAssignmentID=1,validateToDo=function(){var o=document.querySelector(".to-do-header__error");return""===toDoInput.value?(o.classList.add("to-do-header__error--active"),o.classList.add("to-do-header__error--active-visibility"),!1):(o.classList.remove("to-do-header__error--active"),setTimeout(function(){o.classList.remove("to-do-header__error--active-visibility")},300),!0)},createToDoBody=function(){var o=document.querySelector(".to-do-assignment-template").content.cloneNode(!0),t=o.querySelector(".to-do-assignment__text"),e=o.querySelector(".to-do-assignment");e.dataset.id=toDoAssignmentID.toString(),t.textContent=toDoInput.value,toDoAssignmentsContainer.append(o),localStorage.setItem("".concat(toDoAssignmentID),e.outerHTML),toDoAssignmentID++},addToDo=function(){!1!==validateToDo()&&createToDoBody()},loadStoragedToDos=function(){var o,t=__assign({},localStorage);for(o in t)toDoAssignmentsContainer.innerHTML+=t[o],toDoAssignmentID=Number(o)+1};toDoAddBtn.addEventListener("click",addToDo),window.addEventListener("DOMContentLoaded",loadStoragedToDos),localStorage.clear();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
